通过使用反射前后的例子对比, 回答:

1. 面向对象中创建对象, 调用指定的结构(field, method)等功能, 可以用反射也可以不用反射, 区别在哪里?

不使用反射, 我们需要考虑封装性, 出了Person类后， 就不能调用Person类中的private结构
使用反射, 我们可以调用运行时类中的任意构造器, 属性, 方法 (包括private结构)

2. 以前创建对象并调用方法的方式, 与现在学的通过反射创建对象并调用方法的方式对比的话, 哪种用的多？场景是什么?

从我们作为coder开发者的角度来讲, 我们开发中主要是为了完成业务代码, 对于相关的对象, 方法的调用都是确定的,
所以我们使用非反射的方式多一些.

因为反射体现了动态性 (可以在运行时动态的获取对象所属的类, 动态的调用相关方法), 所以我们在设计框架时,
会大量的使用反射. 意味着如果需要学习框架的源码， 就需要学习反射.

框架 = 注解 + 反射 + 设计模式

3. 单例模式的饿汉式和懒汗式中, 我们需要私有化类的构造器以防止类在外部被实例化。 此时通过反射, 可以创建
单例模式中类的多个对象吗?

是的!

4. 通过反射, 可以调用类中私有的结构, 是否与面向对象的封装性矛盾?是不是Java语言设计的Bug？

不存在Bug的!

封装性体现的是是否建议类内部API的问题. 比如, private修饰的结构, 意味着不建议调用

反射体现的是, 我们能否调用的问题. 因为类的完整结构都完整地加载到了内存中， 我们就有能力去调用类中的任何结构.